@model Stacklt_Odoo.Models.Question

@{
    ViewData["Title"] = Model.Title;
}

<div class="container mt-4">
    <div class="row">
        <!-- Main Content -->
        <div class="col-lg-8">
            <!-- Question -->
            <div class="card mb-4">
                <div class="card-body">
                    <div class="row">
                        <!-- Voting Column -->
                        <div class="col-md-1 text-center">
                            <div class="voting-section">
                                <button class="btn btn-sm btn-outline-primary vote-btn" data-type="question" data-id="@Model.QuestionId">
                                    <i class="fas fa-caret-up"></i>
                                </button>
                                <div class="vote-count mt-1 mb-1">0</div>
                                <button class="btn btn-sm btn-outline-secondary vote-btn" data-type="question" data-id="@Model.QuestionId">
                                    <i class="fas fa-caret-down"></i>
                                </button>
                            </div>
                        </div>

                        <!-- Content Column -->
                        <div class="col-md-11">
                            <h1 class="h2 mb-3">@Model.Title</h1>
                            
                            <div class="question-content mb-3">
                                @Html.Raw(Model.Description)
                            </div>

                            <!-- Tags -->
                            @if (Model.QuestionTags.Any())
                            {
                                <div class="mb-3">
                                    @foreach (var questionTag in Model.QuestionTags)
                                    {
                                        <span class="badge bg-light text-dark me-1">@questionTag.Tag.TagName</span>
                                    }
                                </div>
                            }

                            <div class="d-flex justify-content-between align-items-center">
                                <small class="text-muted">
                                    <i class="fas fa-user me-1"></i>@Model.User.Username
                                    <i class="fas fa-clock ms-3 me-1"></i>@Model.CreatedAt.ToString("MMM dd, yyyy 'at' HH:mm")
                                </small>
                                @if (User.Identity?.IsAuthenticated == true && User.FindFirst("UserId")?.Value == Model.UserId.ToString())
                                {
                                    <div>
                                        <a asp-action="Edit" asp-route-id="@Model.QuestionId" class="btn btn-sm btn-outline-primary me-2">
                                            <i class="fas fa-edit me-1"></i>Edit
                                        </a>
                                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="confirmDelete()">
                                            <i class="fas fa-trash me-1"></i>Delete
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Answers Section -->
            <div class="mb-4">
                <h3 class="h4 mb-3">
                    <i class="fas fa-reply me-2"></i>@Model.Answers.Count Answer@(Model.Answers.Count != 1 ? "s" : "")
                </h3>

                @if (Model.Answers.Any())
                {
                    @foreach (var answer in Model.Answers.OrderByDescending(a => a.AnswerId == Model.AcceptedAnswerId).ThenByDescending(a => a.Votes.Count(v => v.VoteType) - a.Votes.Count(v => !v.VoteType)))
                    {
                        <div class="card mb-3 @(answer.AnswerId == Model.AcceptedAnswerId ? "border-success" : "")">
                            <div class="card-body">
                                <div class="row">
                                    <!-- Voting Column -->
                                    <div class="col-md-1 text-center">
                                        <div class="voting-section">
                                            <button class="btn btn-sm btn-outline-primary vote-btn" data-type="answer" data-id="@answer.AnswerId">
                                                <i class="fas fa-caret-up"></i>
                                            </button>
                                            <div class="vote-count mt-1 mb-1">
                                                @(answer.Votes.Count(v => v.VoteType) - answer.Votes.Count(v => !v.VoteType))
                                            </div>
                                            <button class="btn btn-sm btn-outline-secondary vote-btn" data-type="answer" data-id="@answer.AnswerId">
                                                <i class="fas fa-caret-down"></i>
                                            </button>
                                        </div>
                                        
                                        @if (answer.AnswerId == Model.AcceptedAnswerId)
                                        {
                                            <div class="mt-2">
                                                <span class="badge bg-success">
                                                    <i class="fas fa-check me-1"></i>Accepted
                                                </span>
                                            </div>
                                        }
                                    </div>

                                    <!-- Content Column -->
                                    <div class="col-md-11">
                                        <div class="answer-content mb-3">
                                            @Html.Raw(answer.Description)
                                        </div>

                                        <div class="d-flex justify-content-between align-items-center">
                                            <small class="text-muted">
                                                <i class="fas fa-user me-1"></i>@answer.User.Username
                                                <i class="fas fa-clock ms-3 me-1"></i>@answer.CreatedAt.ToString("MMM dd, yyyy 'at' HH:mm")
                                            </small>
                                            
                                            @if (User.Identity?.IsAuthenticated == true)
                                            {
                                                <div>
                                                    @if (Model.UserId.ToString() == User.FindFirst("UserId")?.Value && answer.AnswerId != Model.AcceptedAnswerId)
                                                    {
                                                        <form asp-action="AcceptAnswer" method="post" class="d-inline">
                                                            <input type="hidden" name="questionId" value="@Model.QuestionId" />
                                                            <input type="hidden" name="answerId" value="@answer.AnswerId" />
                                                            <button type="submit" class="btn btn-sm btn-outline-success">
                                                                <i class="fas fa-check me-1"></i>Accept
                                                            </button>
                                                        </form>
                                                    }
                                                    
                                                    @if (answer.UserId.ToString() == User.FindFirst("UserId")?.Value)
                                                    {
                                                        <a href="#" class="btn btn-sm btn-outline-primary ms-1">
                                                            <i class="fas fa-edit me-1"></i>Edit
                                                        </a>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center py-4">
                        <i class="fas fa-comment-slash fa-2x text-muted mb-3"></i>
                        <h5 class="text-muted">No answers yet</h5>
                        <p class="text-muted">Be the first to provide an answer!</p>
                    </div>
                }
            </div>

            <!-- Answer Form -->
            @if (User.Identity?.IsAuthenticated == true)
            {
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h4 class="mb-0">
                            <i class="fas fa-reply me-2"></i>Your Answer
                        </h4>
                    </div>
                    <div class="card-body">
                        <form asp-controller="Answers" asp-action="Create" method="post">
                            <input type="hidden" name="QuestionId" value="@Model.QuestionId" />
                            
                            <div class="mb-3">
                                <label class="form-label fw-bold">Answer</label>
                                <div id="answerEditor" style="height: 200px;"></div>
                                <input type="hidden" name="Description" id="answerDescriptionInput" />
                                <small class="form-text text-muted">
                                    Provide a clear and detailed answer to help the question author.
                                </small>
                            </div>
                            
                            <div class="d-flex justify-content-end">
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-paper-plane me-1"></i>Post Answer
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            }
            else
            {
                <div class="card">
                    <div class="card-body text-center">
                        <i class="fas fa-lock fa-2x text-muted mb-3"></i>
                        <h5>Login to Answer</h5>
                        <p class="text-muted">You need to be logged in to provide an answer.</p>
                        <a asp-controller="Account" asp-action="Login" class="btn btn-primary">
                            <i class="fas fa-sign-in-alt me-1"></i>Login
                        </a>
                    </div>
                </div>
            }
        </div>

        <!-- Sidebar -->
        <div class="col-lg-4">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0"><i class="fas fa-info-circle me-2"></i>Question Info</h5>
                </div>
                <div class="card-body">
                    <div class="row text-center">
                        <div class="col-6">
                            <div class="h4 text-primary">@Model.Answers.Count</div>
                            <small class="text-muted">Answers</small>
                        </div>
                        <div class="col-6">
                            <div class="h4 text-success">@(Model.AcceptedAnswerId.HasValue ? "Yes" : "No")</div>
                            <small class="text-muted">Accepted</small>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card shadow-sm">
                <div class="card-header bg-secondary text-white">
                    <h5 class="mb-0"><i class="fas fa-share me-2"></i>Share</h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <a href="https://twitter.com/intent/tweet?text=@Uri.EscapeDataString(Model.Title)&url=@Uri.EscapeDataString(Context.Request.Scheme + "://" + Context.Request.Host + Context.Request.Path)" 
                           target="_blank" class="btn btn-outline-primary">
                            <i class="fab fa-twitter me-1"></i>Share on Twitter
                        </a>
                        <a href="https://www.facebook.com/sharer/sharer.php?u=@Uri.EscapeDataString(Context.Request.Scheme + "://" + Context.Request.Host + Context.Request.Path)" 
                           target="_blank" class="btn btn-outline-primary">
                            <i class="fab fa-facebook me-1"></i>Share on Facebook
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Include Quill.js for answer editor -->
<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
<script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>

@section Scripts {
    <script>
        // Initialize Quill editor for answer
        var answerQuill = new Quill('#answerEditor', {
            theme: 'snow',
            modules: {
                toolbar: [
                    ['bold', 'italic', 'underline'],
                    ['blockquote', 'code-block'],
                    [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                    ['link', 'image'],
                    ['clean']
                ]
            },
            placeholder: 'Write your answer here...'
        });

        // Update hidden input when editor content changes
        answerQuill.on('text-change', function() {
            document.getElementById('answerDescriptionInput').value = answerQuill.root.innerHTML;
        });

        // Voting functionality
        document.querySelectorAll('.vote-btn').forEach(button => {
            button.addEventListener('click', function() {
                const type = this.dataset.type;
                const id = this.dataset.id;
                const isUpvote = this.querySelector('.fa-caret-up') !== null;
                
                // TODO: Implement AJAX voting
                console.log(`${isUpvote ? 'Upvote' : 'Downvote'} ${type} ${id}`);
            });
        });

        // Delete confirmation
        function confirmDelete() {
            if (confirm('Are you sure you want to delete this question? This action cannot be undone.')) {
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '/Questions/Delete/@Model.QuestionId';
                
                const csrfToken = document.querySelector('input[name="__RequestVerificationToken"]').value;
                const tokenInput = document.createElement('input');
                tokenInput.type = 'hidden';
                tokenInput.name = '__RequestVerificationToken';
                tokenInput.value = csrfToken;
                
                form.appendChild(tokenInput);
                document.body.appendChild(form);
                form.submit();
            }
        }
    </script>
} 